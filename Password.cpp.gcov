        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:
        -:    4:using std::string;
        -:    5:
        -:    6:/*
        -:    7:  The function receives a string counts how many times the same character 
        -:    8:  occurs at the beginning of the string, before any other characters (or the
        -:    9:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   10:  'z' and any ASCII characters are allowed.
        -:   11:*/
        8:   12:int Password::count_leading_characters(string phrase){
        8:   13:  int repetition = 1;
        8:   14:  int index = 0;
        8:   15:  if(phrase.size() <= 0) return 0;
       17:   16:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
       10:   17:    repetition++;
       10:   18:    index++;
        -:   19:  }
        7:   20:  return repetition;
        -:   21:}
        -:   22:
       16:   23:Password::Password(){
       16:   24:  pass_history.push_back("ChicoCA-95929");
       16:   25:}
        -:   26:
        -:   27:
        -:   28:
       10:   29:bool Password::has_mixed_case(string word){
        -:   30:
       10:   31:  bool found = false;
       68:   32:  for(char c : word){
       62:   33:    if( !found && c >= 'A' && c <= 'Z' ){
        5:   34:      found = true;
        -:   35:    }
       57:   36:    else if( found && c >= 'a' && c <= 'z'){
        4:   37:      return true;
        -:   38:    }
        -:   39:  }
        6:   40:  return false;
        -:   41:
        -:   42:}
        -:   43:
        2:   44:void Password::set(string word){
       2*:   45:  if(word.size() >= 8 && word.size() <= 20) {
        2:   46:    if(count_leading_characters(word) <= 3){
        2:   47:      if(has_mixed_case(word)){
        2:   48:        for(auto i : pass_history){
        1:   49:          if(i == word){
    #####:   50:            return;
        -:   51:          }
        1:   52:        }
        1:   53:          pass_history.push_back(word);
        -:   54:      }
        -:   55:    }
        -:   56:    
        -:   57:    
        -:   58:  }
        -:   59:  
        -:   60:}
        -:   61:
        2:   62:bool Password::authenticate(string word){
        2:   63:  if(pass_history.back() == word){
        1:   64:    return true;
        -:   65:  }
        1:   66:  return false;
        -:   67:}
